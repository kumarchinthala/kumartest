What is your Job Profile?

What is your DevOps Experience?

Why you want to learn DevOps?


Draw io
===============
https://app.diagrams.net/
Install Draw io locally on your machine

--------------------------------------
google
discover devops github 

https://github.com/discover-devops/DevOps_Course
------------------------------------------------------
Install GItBash:
https://git-scm.com/downloads


18.61.232.88

Local Git $ git --version
git version 2.43.0
Local Git $


start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects


-------------------------------------------

Git INstallation:
-------------------


To install Git on an Ubuntu EC2 instance on AWS, follow these steps:

Step 1: Connect to Your EC2 Instance
First, you need to connect to your EC2 instance using SSH. You can do this from your terminal (Linux or macOS) or using a tool like PuTTY (Windows).

For Linux or macOS:

ssh -i /path/to/your-key.pem ubuntu@your-ec2-public-ip


For Windows (using PuTTY):
- Convert your `.pem` key to `.ppk` using PuTTYgen.
- Use PuTTY to connect to `ubuntu@your-ec2-public-ip`.

 Step 2: Update the Package List
Once connected, update the package list to ensure that you get the latest version of the package:

sudo apt-get update


 Step 3: Install Git
Now, install Git using the following command:

sudo apt-get install git -y


 Step 4: Verify the Installation
To verify that Git has been installed successfully, check the version:

git --version


Local Git $ git --version
git version 2.43.0
Local Git $
================================================================

Configuring Git

git config --global user.name "devops"
git config --global user.email "devops@gmail.com"
git config --global core.editor "vi"
git config --list

/root/myGitProject



git + verb


git add

Step #: YOu have to initialize a directory

git init


Local Git $ git init
Initialized empty Git repository in /root/myGitProject/.git/
Local Git $


Local Git $ vi myapp.py
Local Git $
Local Git $
Local Git $ ls
myapp.py
Local Git $ pwd
/root/myGitProject
Local Git $ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        myapp.py

nothing added to commit but untracked files present (use "git add" to track)
Local Git $


Local Git $ git add myapp.py
Local Git $ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   myapp.py

Local Git $


Local Git $ git commit -m "Added a new Python Code"
[master (root-commit) de714cd] Added a new Python Code
 1 file changed, 1 insertion(+)
 create mode 100644 myapp.py
Local Git $


Local Git $ git status
On branch master
nothing to commit, working tree clean
Local Git $


File ------> is under OS control not GIT control ----> Untracked area.

Ste#1: Move the from from UNtracked area to Stgged area
git add <>
 
Srep#2: Once the file is in stagged are, you have commit this chnage
git commit -m "Some messge"



Local Git $ git log
commit 37e26143c5ba4279222826a30f58152e4dad46bd (HEAD -> master)
Author: devops <devops@gmail.com>
Date:   Sun Aug 18 15:18:57 2024 +0000

     Added a new TXT file

commit de714cd6fbfdde9f273110f5a3c9f93f4255ecf1
Author: devops <devops@gmail.com>
Date:   Sun Aug 18 15:11:23 2024 +0000

    Added a new Python Code
Local Git $



Local Git $ cat myapp.py
This is my Python code
Local Git $ echo "This is my 2nd line of code" >> myapp.py
Local Git $
Local Git $
Local Git $ cat myapp.py
This is my Python code
This is my 2nd line of code
Local Git $ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   myapp.py

no changes added to commit (use "git add" and/or "git commit -a")
Local Git $

Local Git $ cat myapp.py
This is my Python code
Local Git $ echo "This is my 2nd line of code" >> myapp.py
Local Git $  cat myapp.py
This is my Python code
This is my 2nd line of code
Local Git $  git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   myapp.py

no changes added to commit (use "git add" and/or "git commit -a")
Local Git $ git add myapp.py
Local Git $
Local Git $
Local Git $ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   myapp.py

Local Git $ git commit -m "Added  a new line of code"
[master 8921902] Added  a new line of code
 1 file changed, 1 insertion(+)
Local Git $


If you want to revert back the chnages:
----------------------------------------------
git restore <file>  ----> You have just modified and not yet STAGGED
git restore --staged <file>  ---> YOu have modified and STAGED the file


.gitignore
-----------------

Local Git $ touch a.mov
Local Git $ ls
a.mov  myapp.py  myfile.txt
Local Git $ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        a.mov

nothing added to commit but untracked files present (use "git add" to track)
Local Git $

Local Git $ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        a.mov

nothing added to commit but untracked files present (use "git add" to track)
Local Git $ echo "a.mov" > .gitignore
Local Git $
Local Git $
Local Git $ cat .gitignore
a.mov
Local Git $


Local Git $ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        a.mov

nothing added to commit but untracked files present (use "git add" to track)
Local Git $ echo "a.mov" > .gitignore
Local Git $
Local Git $
Local Git $ cat .gitignore
a.mov
Local Git $ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   .gitignore

no changes added to commit (use "git add" and/or "git commit -a")
Local Git $ git add .gitignore
Local Git $ git commit -m " Added file inside GITIGNORE "
[master d11d1ad]  Added file inside GITIGNORE
 1 file changed, 1 insertion(+)
Local Git $ git status
On branch master
nothing to commit, working tree clean
Local Git $


Must Watch:
https://www.youtube.com/watch?v=vjMZssWMweA



GIt Branching:
------------------------

Local Git $ git branch
* master
Local Git $ git branch br100
Local Git $ git branch
  br100
* master
Local Git $ ls
a.mov  b.mov  c.mov  d.mov  myapp.py  myfile.txt  x.mov  y.mov  z.mov
Local Git $ git checkout br100
Switched to branch 'br100'
Local Git $ ls
a.mov  b.mov  c.mov  d.mov  myapp.py  myfile.txt  x.mov  y.mov  z.mov
Local Git $



3d5d6ad  ------> COmmit ID of the Br100
3d5d6ad

Local Git $ git merge br100 master
Updating d55337b..3d5d6ad
Fast-forward
 file100 | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file100
Local Git $
